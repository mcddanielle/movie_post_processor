#include<stdio.h>
#include<math.h>
#include<stdlib.h>
#include<string.h>
#include<sys/stat.h>

#define PI 3.14159265359
#define TWOPI 6.28318530718

#define SMOVIE 0
#define CMOVIE 1

struct vortex{
  int id;        //count from 0 to N-1 particles in system
  int color;     //used to color shepherds/sheep fast/slow
  float x;       //x position of particle - converted to floats upon write time
  float y;       //y position of particle 
  float x_old;   //x position of particle in last timestep
  float y_old;   //y position of particle in last timestep; 
  float radius;  //
  float vx;
  float vy;
  float speed;
  float accum_dx_old;//keep a much older value of dx to measure ratcheting
  float accum_dx;    //measure the dx value over many timesteps

  int runtime;   // time between tumbles
};

struct syssize{
  double SX;    //DM Width of system
  double SY;    //DM Height of system
  double SX2;   //DM SX*SX  these get used often enough not to recalculate 
  double SY2;   //DM Sy*SY  every time
};

FILE *cmovie;          //DM color movie file pointer
FILE *kinetic_pointer; //list of total system kinetic energy for each frame
FILE *dx_pointer; //list of total system kinetic energy for each frame
FILE *ratchet_pointer; //

//DM check whether particles overlap, and are within the box
void checkpos(struct vortex *vortex,int id,struct syssize syssize);

//DM calculate interparticle distances, including periodic boundary conditions
void distance(float *dr,float *dx,float *dy,float x1,float y1,
	      float x2,float y2,struct syssize syssize);


//DM read in Pa0 
void get_parameters_file(int *maxnum,struct syssize *syssize,double *radius,
			 int *runtime,double *runforce,double *density,
			 double *dt,int *maxtime,int *writemovietime,double *period);

//DM start the simulation
void initialize(int *nV,struct vortex **vortex,struct syssize *syssize,
		double *dt,int *time,int *maxtime,int *writemovietime,
		double *period);

//send position data to be written as a frame
void write_ascii_frame(struct vortex *vortex,
		       int nV,int time,
		       struct syssize syssize);

//read and parse movie
void parse_movie(struct vortex *vortex,int *nV,int *time,double dt,
		 struct syssize syssize,int writemovietime,
		 int movie_type,double period);

//read movie frame
void read_frame(struct vortex *vortex,int *nV,int time,double dt,
		 struct syssize syssize,int writemovietime,
		int movie_type,double period);

//determine what parameter file we have
int doesFileExist(const char *filename);
